(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[974],{463:(e,n,t)=>{"use strict";t.d(n,{default:()=>c});var s=t(5155),r=t(8334),d=t.n(r),l=t(2115),o=t(1859),i=t(5930);function c(){let[e,n]=(0,l.useState)(!1),[t,r]=(0,l.useState)(null),[c,a]=(0,l.useState)(""),[h,p]=(0,l.useState)([{id:"0",name:"Desktop",type:"folder",children:[{id:"1",name:"Projects",type:"folder",children:[{id:"1.1",name:"Web Applications",type:"folder",children:[{id:"1.1.1",name:"React Projects",type:"folder",children:[{id:"sample.txt",name:"project-notes.txt",type:"file"},{id:"example.json",name:"config.json",type:"file"},{id:"sample.ts",name:"utils.ts",type:"file"}]}]}]},{id:"2",name:"Documents",type:"folder",children:[{id:"2.1",name:"Technical Documents",type:"folder",children:[{id:"2.1.1",name:"API Documents",type:"folder",children:[{id:"2.1.1.1",name:"REST-API.md",type:"file"}]}]}]}]}]),u=(e,n)=>{for(let t of e){if(t.id===n)return t;if(t.children){let e=u(t.children,n);if(e)return e}}return null},x=function(e,n){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;for(let s of e){if(s.id===n)return t;if(s.children){let e=x(s.children,n,s);if(e)return e}}return null},j=()=>Date.now().toString(36)+Math.random().toString(36).substring(2);return(0,s.jsxs)("div",{children:[(0,s.jsx)("h2",{children:"Direactree Example Usage"}),(0,s.jsx)("p",{children:"This example shows the example usage of the Direactree component."}),(0,s.jsxs)("div",{className:d().container,children:[(0,s.jsxs)("div",{className:d().treeContainer,children:[(0,s.jsx)("h2",{children:"File Explorer"}),(0,s.jsx)(o.A,{onSelectedNodeChange:e=>{r(e),(null==e?void 0:e.type)==="file"?fetch("/mock-data/".concat(e.id)).then(e=>e.text()).then(e=>a(e)).catch(e=>{console.error("Error while fetching file content:",e),a("Content not found for this file.")}):a("")},structure:h,indent:20,showToolbox:!0,onCreateFolder:e=>{console.log("Folder creation started:",e)},onCreateFile:e=>{console.log("File creation started:",e)},onRename:e=>{console.log("Renaming started:",e)},onDelete:e=>{console.log("Deleting started:",e),p(n=>{let t=JSON.parse(JSON.stringify(n)),s=t.findIndex(n=>n.id===e.id);if(-1!==s)return t.splice(s,1),t;let r=x(t,e.id);if(r&&r.children){let n=r.children.findIndex(n=>n.id===e.id);-1!==n&&r.children.splice(n,1)}return t}),t&&t.id===e.id&&(r(null),a(""))},onSave:e=>{switch(e.actionType){case"create":let n={id:j(),name:e.newName,type:e.createType};"folder"===e.createType&&(n.children=[]),console.log("props selectedNode",e.selectedNode),p(t=>{let s=JSON.parse(JSON.stringify(t));if(e.selectedNode){let t=u(s,e.selectedNode.id);if(t)return t.children||(t.children=[]),t.children.push(n),s}return s.push(n),console.log("Added to the root:",n),s}),console.log("New ".concat("folder"===e.createType?"folder":"file"," creation process completed"));break;case"edit":var s;p(n=>{var s,d;let l=JSON.parse(JSON.stringify(n)),o=u(l,(null===(s=e.selectedNode)||void 0===s?void 0:s.id)||"");return o&&(o.name=e.newName||"",t&&t.id===(null===(d=e.selectedNode)||void 0===d?void 0:d.id)&&r({...t,name:e.newName||""})),l}),console.log("Renamed:",null===(s=e.selectedNode)||void 0===s?void 0:s.id,"new name:",e.newName);break;default:console.log("Unknown action type:",e.actionType)}},toolboxSticky:!0,onNodeMove:(e,n)=>{console.log("Node moving process:",e,"new parent:",n),p(t=>{let s=JSON.parse(JSON.stringify(t)),r=(e,n)=>{for(let t=0;t<e.length;t++){if(e[t].id===n)return e.splice(t,1),!0;let s=e[t].children;if(s&&s.length>0&&r(s,n))return!0}return!1};if(r(s,e.id),null===n)s.push(e);else{let t=u(s,n.id);t&&(t.children||(t.children=[]),t.children.push(e))}return s})},isAllExpanded:!0})]}),(0,s.jsxs)("div",{className:d().fileContent,children:[(0,s.jsxs)("h2",{children:["Selected Node Name: ",t?t.name:"File not selected!"]}),(0,s.jsx)("pre",{style:{width:"100%",minHeight:"400px",height:"95%",borderRadius:"10px",padding:"10px",overflowY:"auto",boxShadow:"inset 0 1px 5px rgba(0, 0, 0, 0.05)",border:"1px solid #e1e4e8",fontSize:"14px",lineHeight:"1.6",color:"white",backgroundColor:"#1e1e2e",borderColor:"#313244",fontFamily:"'Fira Code', 'Consolas', 'Monaco', 'Courier New', monospace"},children:c||"File content will be displayed here..."})]})]}),(0,s.jsx)("div",{className:"props-section",children:(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"Example Usage"}),(0,s.jsx)(i.Ay,{style:{display:"block"},type:"primary",onClick:()=>n(!e),children:"Show Code"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsxs)("code",{children:[" ",e?"\nimport { useState } from \"react\";\nimport { NodePath, SaveProps, TreeNode } from \"direactree\";\nimport Direactree from \"direactree\";\n\nexport default function ExampleUsage() {\n  const [selectedFile, setSelectedFile] = useState<NodePath | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(\"\");\n  const [structure, setStructure] = useState<TreeNode[]>([\n    {\n      id: '0',\n      name: 'Desktop',\n      type: 'folder',\n      children: [\n        {\n          id: '1',\n          name: 'Projects',\n          type: 'folder',\n          children: [\n            {\n              id: '1.1',\n              name: 'Web Applications',\n              type: 'folder',\n              children: [\n                {\n                  id: '1.1.1',\n                  name: 'React Projects',\n                  type: 'folder',\n                  children: [\n                    {\n                      id: 'sample.txt',\n                      name: 'project-notes.txt',\n                      type: 'file',\n                    },\n                    {\n                      id: 'example.json',\n                      name: 'config.json',\n                      type: 'file',\n                    },\n                    {\n                      id: 'sample.ts',\n                      name: 'utils.ts',\n                      type: 'file',\n                    }\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: '2',\n          name: 'Documents',\n          type: 'folder',\n          children: [\n            {\n              id: '2.1',\n              name: 'Technical Documents',\n              type: 'folder',\n              children: [\n                {\n                  id: '2.1.1',\n                  name: 'API Documents',\n                  type: 'folder',\n                  children: [\n                    {\n                      id: '2.1.1.1',\n                      name: 'REST-API.md',\n                      type: 'file',\n                    }\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n      ]\n    }]);\n\n  const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {\n    for (const node of nodes) {\n      if (node.id === id) return node;\n      if (node.children) {\n        const found = findNodeById(node.children, id);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  const findParentNode = (nodes: TreeNode[], id: string, parent: TreeNode | null = null): TreeNode | null => {\n    for (const node of nodes) {\n      if (node.id === id) return parent;\n      if (node.children) {\n        const found = findParentNode(node.children, id, node);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  // Creates a unique id for the node\n  const generateUniqueId = (): string => {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n  };\n\n  // Creates a folder\n  const handleCreateFolder = (nodePath: NodePath | null) => {\n    console.log('Folder creation started:', nodePath);\n    // Here nodePath represents the selected node\n    // The Direactree component will show its own input field\n  };\n\n  // Creates a file\n  const handleCreateFile = (nodePath: NodePath | null) => {\n    console.log('File creation started:', nodePath);\n    // Here nodePath represents the selected node\n    // The Direactree component will show its own input field\n  };\n\n  // Renames a node\n  const handleRename = (nodePath: NodePath) => {\n    console.log('Renaming started:', nodePath);\n    // Here nodePath represents the selected node\n    // The Direactree component will show its own input field\n  };\n\n  // Deletes a node\n  const handleDelete = (nodePath: NodePath) => {\n    console.log('Deleting started:', nodePath);\n\n    setStructure(prevStructure => {\n      const newStructure = JSON.parse(JSON.stringify(prevStructure));\n\n      const rootIndex = newStructure.findIndex((node: TreeNode) => node.id === nodePath.id);\n      if (rootIndex !== -1) {\n        newStructure.splice(rootIndex, 1);\n        return newStructure;\n      }\n\n      const parentNode = findParentNode(newStructure, nodePath.id);\n      if (parentNode && parentNode.children) {\n        const childIndex = parentNode.children.findIndex((node: TreeNode) => node.id === nodePath.id);\n        if (childIndex !== -1) {\n          parentNode.children.splice(childIndex, 1);\n        }\n      }\n\n      return newStructure;\n    });\n\n    // If the deleted file is the selected file, clear the selection\n    if (selectedFile && selectedFile.id === nodePath.id) {\n      setSelectedFile(null);\n      setFileContent(\"\");\n    }\n  };\n\n  // Handles the results of all operations\n  const handleSave = (props: SaveProps) => {\n\n    // This example is shown over the state update.\n    // If the directory structure is managed on the backend (e.g. database), the file/folder name update can be requested to the relevant API endpoint using the data in props.\n    // Here, the data in 'props' can be used to request the relevant API endpoint.\n\n    switch (props.actionType) {\n      case 'create':\n        // Creates a new folder or file\n        const newNode: TreeNode = {\n          id: generateUniqueId(),\n          name: props.newName,\n          type: props.createType! // createType is defined as 'file' or 'folder' in SaveProps and this is guaranteed\n        };\n\n        if (props.createType === 'folder') {\n          newNode.children = [];\n        }\n\n        console.log('props selectedNode', props.selectedNode);\n\n        setStructure(prevStructure => {\n          const newStructure = JSON.parse(JSON.stringify(prevStructure));\n\n          if (props.selectedNode) {\n            const selectedNode = findNodeById(newStructure, props.selectedNode.id);\n\n            if (selectedNode) {\n              if (!selectedNode.children) selectedNode.children = [];\n              selectedNode.children.push(newNode);\n\n              return newStructure;\n            }\n          }\n\n          newStructure.push(newNode);\n\n          console.log('Added to the root:', newNode);\n          return newStructure;\n        });\n\n        break;\n\n      case 'edit':\n\n        setStructure(prevStructure => {\n          const newStructure = JSON.parse(JSON.stringify(prevStructure));\n\n\n          const targetNode = findNodeById(newStructure, props.selectedNode?.id || \"\");\n\n          if (targetNode) {\n            targetNode.name = props.newName || \"\";\n\n            if (selectedFile && selectedFile.id === props.selectedNode?.id) {\n              setSelectedFile({\n                ...selectedFile,\n                name: props.newName || \"\"\n              });\n            }\n          }\n\n\n          return newStructure;\n        });\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSelectedNodeChange = (node: NodePath | null) => {\n    setSelectedFile(node);\n\n    if (node?.type === 'file') {\n      fetch('/api/file?fileName=' + node.id)\n        .then(response => response.text())\n        .then(data => setFileContent(data))\n        .catch(error => {\n          setFileContent(\"Content not found for this file.\");\n        });\n    } else {\n      setFileContent(\"\");\n    }\n  };\n\n  const handleNodeMove = (node: TreeNode, newParent: TreeNode | null) => {\n\n    setStructure(prevStructure => {\n      const newStructure = JSON.parse(JSON.stringify(prevStructure)) as TreeNode[];\n\n      const removeNodeFromParent = (nodes: TreeNode[], nodeId: string): boolean => {\n        for (let i = 0; i < nodes.length; i++) {\n          if (nodes[i].id === nodeId) {\n            nodes.splice(i, 1);\n            return true;\n          }\n\n          const children = nodes[i].children;\n          if (children && children.length > 0) {\n            if (removeNodeFromParent(children, nodeId)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n\n      removeNodeFromParent(newStructure, node.id);\n\n      if (newParent === null) {\n        newStructure.push(node);\n      } else {\n        const targetNode = findNodeById(newStructure, newParent.id);\n\n        if (targetNode) {\n          if (!targetNode.children) {\n            targetNode.children = [];\n          }\n\n          targetNode.children.push(node);\n        }\n      }\n\n      return newStructure;\n    });\n  };\n\n  return (\n    <div>\n      <h2>Direactree Example Usage</h2>\n      <p>This example shows the example usage of the Direactree component.</p>\n      <div className={styles.container}>\n        <div className={styles.treeContainer}>\n          <h2>File Explorer</h2>\n          <Direactree\n            onSelectedNodeChange={handleSelectedNodeChange}\n            structure={structure}\n            indent={20}\n            showToolbox={true}\n            onCreateFolder={handleCreateFolder}\n            onCreateFile={handleCreateFile}\n            onRename={handleRename}\n            onDelete={handleDelete}\n            onSave={handleSave}\n            toolboxSticky={true}\n            onNodeMove={handleNodeMove}\n            isAllExpanded={true}\n          />\n        </div>\n\n        <div className={styles.fileContent}>\n          <h2>Selected Node Name: {selectedFile ? selectedFile.name : 'File not selected!'}</h2>\n          <pre\n            style={{\n              width: '100%',\n              minHeight: '400px',\n              height: '95%',\n              borderRadius: '10px',\n              padding: '10px',\n              overflowY: 'auto',\n              boxShadow: 'inset 0 1px 5px rgba(0, 0, 0, 0.05)',\n              border: '1px solid #e1e4e8',\n              fontSize: '14px',\n              lineHeight: '1.6',\n              color: 'white',\n              backgroundColor: '#1e1e2e',\n              borderColor: '#313244',\n              fontFamily: \"'Fira Code', 'Consolas', 'Monaco', 'Courier New', monospace\"\n            }}\n          >\n            {fileContent || 'File content will be displayed here...'}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n};        ":"Code..."]})})]})})]})}},3952:(e,n,t)=>{"use strict";t.d(n,{default:()=>j});var s=t(5155),r=t(2115);t(9304);let d=e=>{let{data:n,indent:t=2}=e,r=e=>null===e?(0,s.jsx)("span",{className:"json-null",children:"null"}):"boolean"==typeof e?(0,s.jsx)("span",{className:"json-boolean",children:e.toString()}):"number"==typeof e?(0,s.jsx)("span",{className:"json-number",children:e}):"string"==typeof e?(0,s.jsxs)("span",{className:"json-string",children:['"',e,'"']}):Array.isArray(e)?(0,s.jsxs)("span",{className:"json-array",children:["[",e.length>0?(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("div",{className:"json-indent",children:e.map((n,t)=>(0,s.jsxs)("div",{children:[r(n),t<e.length-1&&(0,s.jsx)("span",{className:"json-comma",children:","})]},t))})}):null,"]"]}):"object"==typeof e?d(e):(0,s.jsx)("span",{children:String(e)}),d=e=>{let n=Object.entries(e);return(0,s.jsxs)("span",{className:"json-object",children:["{",n.length>0?(0,s.jsx)("div",{className:"json-indent",children:n.map((e,t)=>{let[d,l]=e;return(0,s.jsxs)("div",{className:"json-property",children:[(0,s.jsxs)("span",{className:"json-key",children:['"',d,'"']}),(0,s.jsx)("span",{className:"json-colon",children:": "}),r(l),t<n.length-1&&(0,s.jsx)("span",{className:"json-comma",children:","})]},d)})}):null,"}"]})};return(0,s.jsx)("pre",{className:"json-printer",children:r(n)})};var l=t(1348),o=t(3324),i=t(186),c=t(2197),a=t(5292),h=t(9659),p=t(6170);let u=l.A,x=[{id:"0",name:"C:/",type:"folder",children:[{id:"1",name:"Users",type:"folder",children:[{id:"2",name:"John Doe",type:"folder",children:[{id:"3",name:"Documents",type:"folder",children:[{id:"4",name:"sample.tsx",type:"file"}]},{id:"5",name:"logs.txt",type:"file"}]}]}]}],j=()=>{let[e,n]=(0,r.useState)(x),[t,l]=(0,r.useState)(20),[j,m]=(0,r.useState)(!0),[N,f]=(0,r.useState)(!0),[v,g]=(0,r.useState)(!0),[y,b]=(0,r.useState)(!0),[S,w]=(0,r.useState)(null),[T,P]=(0,r.useState)(null),[C,D]=(0,r.useState)(null),[F,k]=(0,r.useState)(null),[I,_]=(0,r.useState)(null),A={createFolder:(0,s.jsx)(c.A,{}),createFile:(0,s.jsx)(a.A,{}),rename:(0,s.jsx)(h.A,{}),delete:(0,s.jsx)(p.A,{})};return(0,s.jsxs)("div",{className:"props-section",children:[(0,s.jsx)("h2",{children:"Direactree Props"}),(0,s.jsx)("p",{children:"Direactree provides the following props:"}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"structure"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"structure"})," prop is an object that represent the nodes in the directory tree."]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"TreeNode"}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(d,{data:{id:"string",name:"string",type:"folder | file",children:"TreeNode[]"}})})]}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"<Direactree structure={structure} />"})}),(0,s.jsxs)("div",{className:"example-container",children:[(0,s.jsxs)("div",{className:"code-block",children:[(0,s.jsx)("span",{children:"Structure"})," =",(0,s.jsx)(d,{data:e})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"onSelectedNodeChange"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"onSelectedNodeChange"})," prop is a function that is called when the user selects a node."]}),(0,s.jsx)("p",{children:"The function receives the selected node as an argument."}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"(node: NodePath | null) => void"}),(0,s.jsx)("p",{children:"NodePath"}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(d,{data:{name:"string",id:"string",type:"file | folder",parent:"NodePath | null"}})})]}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"\n  const [selectedNode, setSelectedNode] = useState<NodePath | null>(null);\n  \n  const handleSelectedNodeChange = (node: NodePath | null) => {\n    setSelectedNode(node);\n  };\n\n  <Direactree structure={structure} onSelectedNodeChange={handleSelectedNodeChange} />\n      "})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsx)("p",{children:"-> Select a node and click on it to see the changes."}),(0,s.jsxs)("div",{className:"example-container",children:[(0,s.jsxs)("div",{className:"code-block",children:[(0,s.jsx)("span",{children:"selectedNode"})," =",(0,s.jsx)(d,{data:S||"null"})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,onSelectedNodeChange:e=>{w(e)}})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"onNodeMove"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"onNodeMove"})," prop is a function that is called when the user moves a node."]}),(0,s.jsx)("p",{children:"The function receives the moved source node and the target node as an argument."}),(0,s.jsx)("h3",{children:"NOTE:"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["The ",(0,s.jsx)("b",{children:"onNodeMove"})," prop is not called when the user moves a node to ",(0,s.jsx)("b",{children:"itself"}),"."]}),(0,s.jsxs)("li",{children:["The ",(0,s.jsx)("b",{children:"onNodeMove"})," prop is not called when the user moves a node to ",(0,s.jsx)("b",{children:"its children"}),"."]}),(0,s.jsxs)("li",{children:["The ",(0,s.jsx)("b",{children:"onNodeMove"})," prop is not called when the user moves a node to ",(0,s.jsx)("b",{children:"file"})," node."]})]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"(sourceNode: TreeNode, targetNode: TreeNode) => void"}),(0,s.jsx)("p",{children:"TreeNode"}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(d,{data:{id:"string",name:"string",type:"folder | file",children:"TreeNode[]"}})})]}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"\n  const [sourceNode, setSourceNode] = useState<TreeNode | null>(null);\n  const [targetNode, setTargetNode] = useState<TreeNode | null>(null);\n\n  const handleNodeMove = (sourceNode: TreeNode, targetNode: TreeNode) => {\n    setSourceNode(sourceNode);\n    setTargetNode(targetNode);\n  };\n\n  <Direactree structure={structure} onNodeMove={handleNodeMove} />\n      "})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsx)("p",{children:"-> Select a node and move it to another node to see the changes."}),(0,s.jsxs)("div",{className:"example-container",children:[(0,s.jsxs)("div",{className:"code-block",children:[(0,s.jsx)("span",{children:"sourceNode"})," =",(0,s.jsx)(d,{data:T||"null"})]}),(0,s.jsxs)("div",{className:"code-block",children:[(0,s.jsx)("span",{children:"targetNode"})," =",(0,s.jsx)(d,{data:C||"null"})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,onNodeMove:(e,n)=>{P(e),D(n)}})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"onCreateFolder, onCreateFile, onRename, onDelete"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"onCreateFolder"})," prop is a function that is called when the user creates a folder in a selected node."]}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"onCreateFile"})," prop is a function that is called when the user creates a file in a selected node."]}),(0,s.jsx)("p",{children:"The functions above receives the parent node as an argument."}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"onRename"})," prop is a function that is called when the user renames a selected node."]}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"onDelete"})," prop is a function that is called when the user deletes a selectednode."]}),(0,s.jsx)("p",{children:"The functions above receives the selected node as an argument."}),(0,s.jsx)("h3",{children:"NOTE:"}),(0,s.jsx)("ul",{children:(0,s.jsxs)("li",{children:["If the user not select any node, the function (",(0,s.jsx)("b",{children:"onCreateFolder"}),", ",(0,s.jsx)("b",{children:"onCreateFile"}),") will receive ",(0,s.jsx)("code",{children:"null"})," as an argument and the new node will be created at the root of the tree."]})}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"(parentNode: NodePath) => void"}),(0,s.jsx)("p",{children:"NodePath"}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(d,{data:{name:"string",id:"string",type:"file | folder",parent:"NodePath | null"}})})]}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"\n  const [parentNode, setParentNode] = useState<NodePath | null>(null);\n\n  const handleCreateFolder = (parentNode: NodePath | null) => {\n    setParentNode(parentNode);\n  };\n\n  const handleCreateFile = (parentNode: NodePath | null) => {\n    setParentNode(parentNode);\n  };\n\n  const handleRename = (node: NodePath | null) => {\n    setParentNode(node);\n  };  \n\n  const handleDelete = (node: NodePath | null) => {\n    setParentNode(node);\n  };\n\n  <Direactree structure={structure} onCreateFolder={handleCreateFolder} onCreateFile={handleCreateFile} onRename={handleRename} onDelete={handleDelete} />\n      "})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsx)("p",{children:"-> Select a node and click on the toolbox icons to see the changes."}),(0,s.jsxs)("div",{className:"example-container",children:[(0,s.jsxs)("div",{className:"code-block",children:[(0,s.jsx)("span",{children:"parentNode"})," =",(0,s.jsx)(d,{data:F||"null"})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,onCreateFolder:e=>{k(e)},onCreateFile:e=>{k(e)},onRename:e=>{k(e)},onDelete:e=>{k(e)}})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"onSave"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"onSave"})," prop is a function that is called when the user clicks on the save button on the editable area."]}),(0,s.jsx)("p",{children:"The function receives the save props as an argument."}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"(saveProps: SaveProps) => void"}),(0,s.jsx)("p",{children:"SaveProps"}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(d,{data:{newName:"string",selectedNode:"NodePath | null",actionType:"create | edit",createType:"folder | file"}})}),(0,s.jsxs)("p",{children:[(0,s.jsx)("b",{children:"NodePath"})," as you know."]})]}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"\n  const [saveProps, setSaveProps] = useState<SaveProps | null>(null);\n\n  const handleSave = (saveProps: SaveProps | null) => {\n    setSaveProps(saveProps);\n  };\n\n  <Direactree structure={structure} onSave={handleSave} />\n      "})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsx)("p",{children:"-> Select a node, and click on the toolbox, fill the input and click on the save button to see the changes."}),(0,s.jsxs)("div",{className:"example-container",children:[(0,s.jsxs)("div",{className:"code-block",children:[(0,s.jsx)("span",{children:"saveProps"})," =",(0,s.jsx)(d,{data:I||"null"})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,onSave:e=>{_(e)}})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"isAllExpanded"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"isAllExpanded"})," prop is a boolean value that determines whether all nodes are expanded for initial render."]}),(0,s.jsxs)("div",{children:["Default value is ",(0,s.jsx)("code",{children:"false"}),"."]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"boolean"})]}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"<Direactree structure={structure} isAllExpanded={".concat(N,"} />")})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsxs)("div",{className:"interactive-example",children:[(0,s.jsxs)("div",{children:[(0,s.jsx)(o.A,{checked:N,onChange:f}),(0,s.jsxs)("span",{children:[(0,s.jsx)("b",{children:"isAllExpanded:"})," ",N?"true":"false"]})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,isAllExpanded:N})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"indent"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"indent"})," prop is the number of spaces to indent the tree."]}),(0,s.jsxs)("div",{children:["Minimum value is ",(0,s.jsx)("code",{children:"8"}),". and maximum value is ",(0,s.jsx)("code",{children:"50"}),"."]}),(0,s.jsxs)("div",{children:[" If the value is less than ",(0,s.jsx)("code",{children:"8"}),", it will be set to ",(0,s.jsx)("code",{children:"8"}),"."]}),(0,s.jsxs)("div",{children:[" If the value is greater than ",(0,s.jsx)("code",{children:"50"}),", it will be set to ",(0,s.jsx)("code",{children:"50"}),"."]}),(0,s.jsxs)("div",{children:["Default value is ",(0,s.jsx)("code",{children:"20"}),"."]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"number"})]}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"<Direactree structure={structure} indent={".concat(t,"} />")})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsxs)("div",{className:"interactive-example",children:[(0,s.jsxs)("div",{children:[(0,s.jsx)(i.A,{defaultValue:t,min:8,max:50,step:1,value:t,onChange:l}),(0,s.jsxs)("span",{children:[(0,s.jsx)("b",{children:"indent:"})," ",t]})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,indent:t,isAllExpanded:N})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"allowDragAndDrop"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"allowDragAndDrop"})," prop is a boolean value that determines whether to allow drag and drop."]}),(0,s.jsxs)("div",{children:["Default value is ",(0,s.jsx)("code",{children:"true"}),"."]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"boolean"})]}),(0,s.jsx)("h3",{children:"When to use?"}),(0,s.jsx)("ul",{className:"when-to-use",children:(0,s.jsxs)("li",{children:["If the component only show the directory tree and you don't want to change the structure, you can set the ",(0,s.jsx)("b",{children:"allowDragAndDrop"})," prop to ",(0,s.jsx)("code",{children:"false"}),"."]})}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"<Direactree structure={structure} allowDragAndDrop={".concat(v,"} />")})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsxs)("div",{className:"interactive-example",children:[(0,s.jsxs)("div",{children:[(0,s.jsx)(o.A,{checked:v,onChange:g}),(0,s.jsxs)("span",{children:[(0,s.jsx)("b",{children:"allowDragAndDrop:"})," ",v?"true":"false"]})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,allowDragAndDrop:v,isAllExpanded:N})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"showToolbox"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"showToolbox"})," prop is a boolean value that determines whether to show the toolbox."]}),(0,s.jsxs)("div",{children:["Default value is ",(0,s.jsx)("code",{children:"true"}),"."]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"boolean"})]}),(0,s.jsx)("h3",{children:"When to use?"}),(0,s.jsx)("ul",{className:"when-to-use",children:(0,s.jsxs)("li",{children:["If the component only show the directory tree and you don't want to change the structure, you can set the ",(0,s.jsx)("b",{children:"showToolbox"})," prop to ",(0,s.jsx)("code",{children:"false"}),"."]})}),(0,s.jsx)("br",{}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"<Direactree structure={structure} showToolbox={".concat(j,"} />")})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsxs)("div",{className:"interactive-example",children:[(0,s.jsxs)("div",{children:[(0,s.jsx)(o.A,{checked:j,onChange:m}),(0,s.jsxs)("span",{children:[(0,s.jsx)("b",{children:"showToolbox:"})," ",j?"true":"false"]})]}),(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,showToolbox:j})})]})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"toolboxIcons"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"toolboxIcons"})," prop is an object that determines the custom icons of the toolbox."]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"ToolboxIcons"}),(0,s.jsx)("div",{className:"code-block",children:(0,s.jsx)(d,{data:{"createFolder?":"React.ReactNode","createFile?":"React.ReactNode","rename?":"React.ReactNode","delete?":"React.ReactNode"}})})]}),(0,s.jsx)("h3",{children:"When to use?"}),(0,s.jsx)("ul",{className:"when-to-use",children:(0,s.jsxs)("li",{children:["If you want to use custom icons, you can set the ",(0,s.jsx)("b",{children:"toolboxIcons"})," prop."]})}),(0,s.jsx)("br",{}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"const toolboxIcons = {\n  createFolder: <FolderAddOutlined />,\n  createFile: <FileAddOutlined />,\n  rename: <EditOutlined />,\n  delete: <DeleteOutlined />\n};\n\n<Direactree \n  structure={structure} \n  toolboxIcons={toolboxIcons} \n/>"})}),(0,s.jsx)("div",{className:"interactive-example",children:(0,s.jsx)("div",{children:(0,s.jsx)(u,{structure:e,toolboxIcons:A})})})]}),(0,s.jsxs)("div",{className:"prop-card",children:[(0,s.jsx)("h3",{children:"toolboxSticky"}),(0,s.jsxs)("p",{children:["The ",(0,s.jsx)("b",{children:"toolboxSticky"})," prop is a boolean value that determines whether to make the toolbox sticky."]}),(0,s.jsxs)("div",{children:["Default value is ",(0,s.jsx)("code",{children:"false"}),"."]}),(0,s.jsxs)("div",{children:["Type: ",(0,s.jsx)("code",{children:"boolean"})]}),(0,s.jsx)("h3",{children:"When to use?"}),(0,s.jsx)("ul",{className:"when-to-use",children:(0,s.jsxs)("li",{children:["If you want to make the toolbox sticky when the user scrolls, you can set the ",(0,s.jsx)("b",{children:"toolboxSticky"})," prop to ",(0,s.jsx)("code",{children:"true"}),"."]})}),(0,s.jsx)("br",{}),(0,s.jsx)("p",{children:"Example:"}),(0,s.jsx)("pre",{className:"code-example",children:(0,s.jsx)("code",{children:"<Direactree structure={structure} toolboxSticky={".concat(y,"} />")})}),(0,s.jsx)("h3",{className:"try-it",children:"Try it!"}),(0,s.jsxs)("div",{className:"interactive-example",children:[(0,s.jsxs)("div",{children:[(0,s.jsx)(o.A,{checked:y,onChange:b}),(0,s.jsxs)("span",{children:[(0,s.jsx)("b",{children:"toolboxSticky:"})," ",y?"true":"false"]})]}),(0,s.jsx)("div",{style:{height:"200px",overflow:"auto"},children:(0,s.jsx)(u,{structure:e,toolboxSticky:y,isAllExpanded:!0})})]})]})]})}},3999:()=>{},5911:(e,n,t)=>{Promise.resolve().then(t.bind(t,4813)),Promise.resolve().then(t.t.bind(t,8334,23)),Promise.resolve().then(t.bind(t,463)),Promise.resolve().then(t.bind(t,3952)),Promise.resolve().then(t.t.bind(t,3999,23))},8334:e=>{e.exports={page:"page_page__ZU32B",main:"page_main__GlU4n",header:"page_header__kVzhN",container:"page_container__aoG4z",treeContainer:"page_treeContainer__ZiRyx",fileContent:"page_fileContent__efizu","file-content":"page_file-content__7Quav",ctas:"page_ctas__g5wGe",primary:"page_primary__V8M9Y",secondary:"page_secondary__lm_PT",footer:"page_footer__sHKi3",logo:"page_logo__7fc9l"}},9304:()=>{}},e=>{var n=n=>e(e.s=n);e.O(0,[166,249,441,684,358],()=>n(5911)),_N_E=e.O()}]);